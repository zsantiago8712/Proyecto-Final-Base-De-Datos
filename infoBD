
///////////////////*************CREACION DE TABLAS*************//////////////////



// Usuarios
CREATE TABLE Usuarios(
    Id_cuenta int AUTO_INCREMENT PRIMARY KEY, 
    User_type boolean not null,
    Nombre varchar(50) not null,
    Carrera varchar(80),
    Semestre int, 
    Correo varchar(80) not null,
    Ap_pat varchar(50) not null, 
    Ap_mat varchar(50), 
    Password varchar(50) not null, 
    F_nacimiento date not null
);


// Catalogo
CREATE TABLE Catalogo(
    Isbn int AUTO_INCREMENT PRIMARY KEY,  
    Nombre_lb varchar(80) not null, 
    Editorial varchar(50),  
    Num_ejemplares int not null
);


// Sistema de prestamos
CREATE TABLE Sistema_prestamos(
    Id_prestamo int AUTO_INCREMENT PRIMARY KEY, 
    Id_cuenta int not null,
    Isbn int not null, 
    FOREIGN KEY (Id_cuenta) REFERENCES Usuarios(Id_cuenta) ON DELETE CASCADE,
    FOREIGN KEY (Isbn) REFERENCES Catalogo(Isbn) ON DELETE CASCADE,
    Fecha_solicitud date not null,
    Fecha_regreso date not null,
    Devuelto boolean NOT NULL    
);

// Sistema de Devoluciones
CREATE TABLE Sistema_devoluciones(
    Id_devolucion INT AUTO_INCREMENT PRIMARY KEY, 
    Id_prestamo INT NOT NULL,
    Id_cuenta INT NOT NULL,
    Isbn INT NOT NULL, 
    FOREIGN KEY (Id_prestamo) REFERENCES Sistema_prestamos(Id_prestamo) ON DELETE CASCADE,
    FOREIGN KEY (Id_cuenta) REFERENCES Usuarios(Id_cuenta) ON DELETE CASCADE,
    FOREIGN KEY (Isbn) REFERENCES Catalogo(Isbn) ON DELETE CASCADE,
    Fecha_devolucion DATE NOT NULL
);



///////////////////*************INSERTS USADOS*************//////////////////

    // Usuarios
INSERT INTO Usuarios(User_type, Nombre, Ap_pat, Ap_mat, Carrera, Semestre, Correo,  Password, F_nacimiento) 
    VALUES(TRUE, 'Jaime', 'Cojab', 'Mizrahi', 'Ingeneria Telecomunaciones y Computacion', 5, 'jaime@yahoo.com', AES_ENCRYPT('COJAB', 'AES'), '1999/10/20');
INSERT INTO Usuarios(User_type, Nombre, Ap_pat, Ap_mat, Carrera, Semestre, Correo,  Password, F_nacimiento) 
    VALUES(TRUE, 'Carlos', 'Salgado', 'Jimenez', 'Psicologia', 5, 'carlos@yahoo.com', AES_ENCRYPT('SALGADO', 'AES'), '2000/10/23');
INSERT INTO Usuarios(User_type, Nombre, Ap_pat, Ap_mat, Carrera, Semestre, Correo,  Password, F_nacimiento) 
    VALUES(False, 'Sebastian', 'Ramiez', 'Chavez', 'Medicina', 5, 'sebastian@yahoo.com', AES_ENCRYPT('RAMIREZ', 'AES'), '1982/09/15');
INSERT INTO Usuarios(User_type, Nombre, Ap_pat, Ap_mat, Carrera, Semestre, Correo,  Password, F_nacimiento) 
    VALUES(False, 'Alex', 'Bejar', 'Martinez', 'Finanzas', 5, 'alex@yahoo.com', AES_ENCRYPT('RAMIREZ', 'AES'), '1985/04/02');
INSERT INTO Usuarios(User_type, Nombre, Ap_pat, Ap_mat, Carrera, Semestre, Correo,  Password, F_nacimiento) 
    VALUES(False, 'Antonio', 'Flores', 'Slim', 'Ingeneria Mecanica', 5, 'antonio@yahoo.com', AES_ENCRYPT('FLORES', 'AES'), '1975/12/29');
INSERT INTO Usuarios(User_type, Nombre, Ap_pat, Ap_mat, Carrera, Semestre, Correo,  Password, F_nacimiento) 
    VALUES(False, 'Rosa', 'Gomez', 'Bola√±os', 'Medicina', 5, 'rosa@yahoo.com', AES_ENCRYPT('GOMEZ', 'AES'), '1997/09/11');
INSERT INTO Usuarios(User_type, Nombre, Ap_pat, Ap_mat, Carrera, Semestre, Correo,  Password, F_nacimiento) 
    VALUES(False, 'David', 'Hernandez', 'Montoya', 'Psicologia', 5, 'david@yahoo.com', AES_ENCRYPT('HERNANDEZ', 'AES'), '1972/02/25');
INSERT INTO Usuarios(User_type, Nombre, Ap_pat, Ap_mat, Carrera, Semestre, Correo,  Password, F_nacimiento) 
    VALUES(False, 'Karla', 'Reyes', 'Martinez', 'Filosofia', 5, 'karla@yahoo.com', AES_ENCRYPT('REYES', 'AES'), '1990/08/04');
INSERT INTO Usuarios(User_type, Nombre, Ap_pat, Ap_mat, Carrera, Semestre, Correo,  Password, F_nacimiento) 
    VALUES(False, 'Felicia', 'Ordones', 'Cabrera', 'Literatura', 5, 'felicia@yahoo.com', AES_ENCRYPT('ORDONES', 'AES'), '1975/07/05');
INSERT INTO Usuarios(User_type, Nombre, Ap_pat, Ap_mat, Carrera, Semestre, Correo,  Password, F_nacimiento) 
VALUES(False, 'Sandra', 'Rosales', 'Cobos', 'Ingeneria Quimica', 5, 'sandra@yahoo.com', AES_ENCRYPT('ROSALES', 'AES'), '1990/03/26');
INSERT INTO Usuarios(User_type, Nombre, Ap_pat, Ap_mat, Carrera, Semestre, Correo,  Password, F_nacimiento) 
VALUES(False, 'admin', 'admin', 'amin', 'NULL', NULL, 'admin@yahoo.com', AES_ENCRYPT('admin', 'AES'), '1999/10/20');
    
    
    // Catalogo
INSERT INTO Catalogo(Nombre_lb, Editorial, Num_ejemplares) VALUES('It','LibrosLib',4);
INSERT INTO Catalogo(Nombre_lb, Editorial, Num_ejemplares) VALUES('La Catedral','Libros4',2);
INSERT INTO Catalogo(Nombre_lb, Editorial, Num_ejemplares) VALUES('Armado','Pinguino',8);
INSERT INTO Catalogo(Nombre_lb, Editorial, Num_ejemplares) VALUES('El Capitan','NobelasYmas',6);
INSERT INTO Catalogo(Nombre_lb, Editorial, Num_ejemplares) VALUES('El Jardin','CatedralLibros',10);
INSERT INTO Catalogo(Nombre_lb, Editorial, Num_ejemplares) VALUES('Presidentes','LibrosLib',6);
INSERT INTO Catalogo(Nombre_lb, Editorial, Num_ejemplares) VALUES('Hernesto','Libros4',7);
INSERT INTO Catalogo(Nombre_lb, Editorial, Num_ejemplares) VALUES('El Mar Rojo','Pinguino',15);
INSERT INTO Catalogo(Nombre_lb, Editorial, Num_ejemplares) VALUES('La Trajinera','NobelasYmas',6);
INSERT INTO Catalogo(Nombre_lb, Editorial, Num_ejemplares) VALUES('Nobles','LibrosLib',12);
INSERT INTO Catalogo(Nombre_lb, Editorial, Num_ejemplares) VALUES('The Witcher','LibrosLib',1);



//////////////////*************FUNCIONES*************//////////////////

// LOGIN

DELIMITER $$
CREATE PROCEDURE login(correoToSearch VARCHAR(100), passwordToSearch VARCHAR(100)) 

BEGIN 

SELECT Id_cuenta, User_type, Nombre,Ap_pat, Ap_mat, Carrera, Semestre, Correo, F_nacimiento, (AES_DECRYPT(Password, 'AES')) AS Password 
FROM Usuarios WHERE Correo = correoToSearch AND (AES_DECRYPT(Password, 'AES')) = passwordToSearch;


END$$ 

DELIMITER;
        //Ejemplo de uso
        CALL login('admin@yahoo.com', 'admin');



//FUNCNOIES USUARIOS

    //FUNCION PARA SOLICITAR LA RENTA DE UN LIBRO



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DELIMITER $$
CREATE PROCEDURE rentaLibro(Id_cuentaToSet INT, IsbnToSet INT) 

BEGIN 

INSERT INTO Sistema_prestamos(Id_cuenta, Isbn, Fecha_solicitud, Fecha_regreso, Devuelto) VALUES(Id_cuentaToSet, IsbnToSet, now(), DATE_ADD(now(), INTERVAL 8 DAY), FALSE);
UPDATE Catalogo SET Num_ejemplares = Num_ejemplares - 1 WHERE Isbn = IsbnToSet;



END$$ 

DELIMITER ;

        //Ejemplo de uso
        CALL rentaLibro(1, 1);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    // FUNCION PARA OBTENR DATOS DE TODOS LOS Usuarios
CALL getAllUsers();
DELIMITER $$
CREATE PROCEDURE getAllUsers() 

BEGIN 

SELECT USR.Id_cuenta, Nombre, Ap_pat, C.Nombre_lb, SP.Fecha_solicitud, SP.Fecha_regreso FROM Usuarios USR 
LEFT JOIN Sistema_prestamos SP ON USR.Id_cuenta = SP.Id_cuenta
LEFT JOIN Catalogo C on SP.Isbn = C.Isbn;

END$$

DELIMITER ;

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    //FUNCION PARA BUSCAR USARIO POR NOMBRE
DELIMITER $$

CREATE PROCEDURE searchUserByNombre(NombreToSearch VARCHAR(255)) 

BEGIN

SELECT USR.Id_cuenta, Nombre, Ap_pat, C.Nombre_lb, SP.Fecha_solicitud, SP.Fecha_regreso FROM Usuarios USR 
LEFT JOIN Sistema_prestamos SP ON USR.Id_cuenta = SP.Id_cuenta
LEFT JOIN Catalogo C on SP.Isbn = C.Isbn WHERE USR.Nombre = NombreToSearch;

END$$

DELIMITER ;
    //Ejemplo de uso
    CALL searchUserByNombre('Jaime');



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// FUNCION PARA BUSCAR USARIO POR ID CUENTA

DELIMITER $$

CREATE PROCEDURE searchUserByIdCuenta(IdCuentaToSearch INT) 

BEGIN

SELECT USR.Id_cuenta, Nombre, Ap_pat, C.Nombre_lb, SP.Fecha_solicitud, SP.Fecha_regreso FROM Usuarios USR 
LEFT JOIN Sistema_prestamos SP ON USR.Id_cuenta = SP.Id_cuenta
LEFT JOIN Catalogo C on SP.Isbn = C.Isbn WHERE USR.Id_cuenta = IdCuentaToSearch;

END$$

DELIMITER ;
        //Ejemplo de uso
        CALL searchUserByIdCuenta(1);



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




DELIMITER $$

CREATE PROCEDURE searchUserByCarrera(CarreaToSearch VARCHAR(80)) 

BEGIN

SELECT USR.Id_cuenta, Nombre, Ap_pat, C.Nombre_lb, SP.Fecha_solicitud, SP.Fecha_regreso FROM Usuarios USR 
LEFT JOIN Sistema_prestamos SP ON USR.Id_cuenta = SP.Id_cuenta
LEFT JOIN Catalogo C on SP.Isbn = C.Isbn WHERE USR.Carrera = CarreaToSearch;

END $$

DELIMITER ;
        //Ejemplo de uso
        CALL searchUserByCarrera('Medicina');

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




    // Busca Usarios por nombre del libro prestado

DELIMITER $$

CREATE PROCEDURE searchUserByNombreLib(NombreLibToSearch VARCHAR(80)) 

BEGIN

SELECT USR.Id_cuenta, Nombre, Ap_pat, C.Nombre_lb, SP.Fecha_solicitud, SP.Fecha_regreso FROM Usuarios USR 
LEFT JOIN Sistema_prestamos SP ON USR.Id_cuenta = SP.Id_cuenta
LEFT JOIN Catalogo C on SP.Isbn = C.Isbn WHERE C.Nombre_lb = NombreLibToSearch;

END $$

DELIMITER ;
        //Ejemplo de uso
        CALL searchUserByNombreLib('EL Capitan')


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    // Agrega un usario nuevo a la tabla
DELIMITER $$

CREATE PROCEDURE addNewUser(User_type__new boolean, Nombre_new VARCHAR(100), Ap_pat_new VARCHAR(100), Ap_mat_new VARCHAR(100), 
Carrera_new VARCHAR(100), Semestre_new INT, Correo_new VARCHAR(100), Password_new VARCHAR(100), F_nacimiento_new DATE) 

BEGIN

INSERT INTO Usuarios(User_type, Nombre, Ap_pat, Ap_mat, Carrera, Semestre, Correo,  Password, F_nacimiento) VALUES(User_type__new, Nombre_new, Ap_pat_new, Ap_mat_new, Carrera_new, Semestre_new, Correo_new, AES_ENCRYPT(Password_new, 'AES'), F_nacimiento_new);

END $$

DELIMITER ;

        //Ejemplo de uso
        CALL addNewUser(FALSE, 'Maria', 'Solis', NULL, NULL, NULL, 'maria@yahoo.com', 'male', '1993/01/03');


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



///// FUNCNIOES LIBROS

    // Funcion para obtener todos los libros


DELIMITER $$

CREATE PROCEDURE getAllLibros() 

BEGIN 

SELECT * FROM Catalogo;

END $$

DELIMITER ;
    //Ejemplo de uso
    CALL getAllLibros();


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    // Funcion para obtenr libros por ISBN

DELIMITER $$

CREATE PROCEDURE getLibroByIsbn(searchByISBN INT) 

BEGIN 

SELECT * FROM Catalogo WHERE Isbn = searchByISBN;

END $$

DELIMITER ;

        //Ejemplo de uso
        CALL getLibroByIsbn(4);

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    // Funcion para obtenr libros por nombre

DELIMITER $$

CREATE PROCEDURE getLibroByName(searchLibroByNombre VARCHAR(100)) 

BEGIN 

SELECT * FROM Catalogo WHERE Nombre_lb = searchLibroByNombre;

END $$

DELIMITER ;
        //Ejemplo de uso
        ALL getLibroByName('It');


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    // Funcion para obtenr libros por Editorial
DELIMITER $$

CREATE PROCEDURE getLibroByEditorial(searchLibroByEditorial VARCHAR(100)) 

BEGIN 

SELECT * FROM Catalogo WHERE Editorial = searchLibroByEditorial;

END $$

DELIMITER ;

        //Ejemplo de uso
        CALL getLibroByEditorial('LibrosLib');


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    // Funcion para obtenr libros por Numero de Ejemplares
DELIMITER $$

CREATE PROCEDURE getLibroByNumeroEjemplares(searchByNumeroEjem INT) 

BEGIN 

SELECT * FROM Catalogo WHERE Num_ejemplares = searchByNumeroEjem;

END $$

DELIMITER ;
        //Ejemplo de uso
        CALL getLibroByNumeroEjemplares(3);



////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


////// PRESTAMOS 

        // Funcion para obtner los libors que tiene prestados el usario
DELIMITER $$

CREATE PROCEDURE getLibrosPrestados(searchByUserId INT) 

BEGIN 

SELECT SP.Id_prestamo, C.Isbn, C.Nombre_lb, C.Editorial, SP.Fecha_solicitud, SP.Fecha_regreso, CAST( NOW() AS Date ) AS FECHA_ACTUAL FROM Usuarios USR 
LEFT JOIN Sistema_prestamos SP ON USR.Id_cuenta = SP.Id_cuenta
LEFT JOIN Catalogo C on SP.Isbn = C.Isbn WHERE USR.Id_cuenta = searchByUserId AND SP.Devuelto = FALSE;

END $$

DELIMITER ;

        //Ejemplo de uso
        CALL getLibrosPrestados(1);


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


    // funcion para regresar el libro prestado

DELIMITER $$

CREATE PROCEDURE regresarLibro(searchByIsbn INT, seachByUserId INT, searchByIdPrestamo INT) 

BEGIN 

UPDATE Catalogo SET Num_ejemplares = Num_ejemplares + 1 WHERE Isbn = searchByISBN;
UPDATE Sistema_prestamos set Devuelto = TRUE WHERE Id_prestamo = searchByIdPrestamo;
INSERT INTO Sistema_devoluciones(Id_prestamo, Id_cuenta, Isbn, Fecha_devolucion) VALUES(searchByIdPrestamo, seachByUserId, searchByIsbn, NOW());

END $$

DELIMITER ;
